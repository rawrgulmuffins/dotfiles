# This file contains all of the sh (plain jane POSIC Shell commands) that will
# run for all shells. Any shell rc files that are contained in this dotfiles
# Directory should be able to run every command in this profile. If a command
# is shell specific then it should be moved to it's respective rc file.

# This SO post contains information about how to load different profiles
# depending in the shell that was loaded.
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced


# The Shell determination code was found at:
# https://stackoverflow.com/questions/5166657/how-do-i-tell-what-type-my-shell-is
#
# .profile is sourced at login by sh and ksh. The zsh sources .zshrc and
# bash sources .bashrc. To get the same behaviour from zsh and bash as well
# I suggest "cd; ln -s .profile .zshrc; ln -s .profile .bashrc".
# Determine what (Bourne compatible) shell we are running under. Put the result
# in $PROFILE_SHELL (not $SHELL) so further code can depend on the shell type.


set -uo pipefail
IFS=$'\n\t'

if test -n "$ZSH_VERSION"; then
  PROFILE_SHELL=zsh
  source $HOME/.zshrc
elif test -n "$BASH_VERSION"; then
  PROFILE_SHELL=bash
  source $HOME/.bashrc
elif test -n "$KSH_VERSION"; then
  PROFILE_SHELL=ksh
elif test -n "$FCEDIT"; then
  PROFILE_SHELL=ksh
elif test -n "$PS3"; then
  PROFILE_SHELL=unknown
else
  PROFILE_SHELL=sh
fi

export PATH=/Users/alexl/.local/bin:$PATH

#configs
export EDITOR="vim"
export VISUAL="$EDITOR"
export EDITOR="$VISUAL"

#colored manpages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

#Save ALL THE THINGS!
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
