" This Vimrc is a modification of Sontek, Brian Schiller, and Brooks Kindle's
" Vimrc. It's used and maintained by Alex LordThorsen and is intended to be used
" while programming with a focus on Python, C, Rust, SQL, and Shell Scripts.

"  ____  _             _
" |  _ \| |_   _  __ _(_)_ __  ___
" | |_) | | | | |/ _` | | '_ \/ __|
" |  __/| | |_| | (_| | | | | \__ \
" |_|   |_|\__,_|\__, |_|_| |_|___/
"

" Initialize Vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
" https://github.com/VundleVim/Vundle.vim
Plugin 'VundleVim/Vundle.vim'

" TODO: Look at each of Brook's Plugins and figure out which ones to keep and
"       which one's to remove. Should probably only use one at at time so that
"       I learn what each of the commands / bindings / configs are.
"
" Development Environment
Plugin 'justinmk/vim-sneak'
" Plugin 'tpope/vim-commentary'
" Plugin 'tpope/vim-surround'
" Plugin 'tpope/vim-repeat'
" Plugin 'junegunn/fzf'
" Plugin 'junegunn/fzf.vim'            " Requires fzf to work.
" Plugin 'suan/vim-instant-markdown'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'w0rp/ale'
" Plugin 'fisadev/vim-isort'
" Plugin 'junegunn/goyo.vim'
" Plugin 'junegunn/limelight.vim'
Plugin 'scrooloose/nerdtree'
" Plugin 'Xuyuanp/nerdtree-git-plugin' " Requires nerdtree to work

" Beautification
" Plugin 'bling/vim-bufferline'
" Plugin 'vim-airline/vim-airline'
Plugin 'rafi/awesome-vim-colorschemes'

call vundle#end()
" Turn filetype back on
filetype plugin indent on

"  ____  _             _          ____             __ _
" |  _ \| |_   _  __ _(_)_ __    / ___|___  _ __  / _(_) __ _
" | |_) | | | | |/ _` | | '_ \  | |   / _ \| '_ \| |_| |/ _` |
" |  __/| | |_| | (_| | | | | | | |__| (_) | | | |  _| | (_| |
" |_|   |_|\__,_|\__, |_|_| |_|  \____\___/|_| |_|_| |_|\__, |
"                |___/                                  |___/
"

" TODO: Go back to:
" https://github.com/brookskindle/dotfiles/blob/master/vim/.vimrc
" every time I turn on a plugin to see what Brook's plugin settings are.

" Ignore case with sneak
let g:sneak#use_ic_scs = 1

"   ____ _       _           _   ____       _   _   _
"  / ___| | ___ | |__   __ _| | / ___|  ___| |_| |_(_)_ __   __ _ ___
" | |  _| |/ _ \| '_ \ / _` | | \___ \ / _ \ __| __| | '_ \ / _` / __|
" | |_| | | (_) | |_) | (_| | |  ___) |  __/ |_| |_| | | | | (_| \__ \
"  \____|_|\___/|_.__/ \__,_|_| |____/ \___|\__|\__|_|_| |_|\__, |___/
"
" vIM
set nocompatible            " Turn off vi compatibility to use new features.
set secure                  " Reduce the allowable settings for vim.

" All built in settings
set title                   " show title in console title bar
set number                  " Display line numbers
set list                    " Display post-fix spaces using the $ character.
set numberwidth=1           " using only 1 column (and 1 space) while possible
set laststatus=2            " Always show the status line

""" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set ruler                   " show the cursor position all the time
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a paren once it's balanced
set nowrap                  " don't wrap text
set linebreak               " don't wrap textin the middle of a word
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldmethod=indent       " allow us to fold on indents
set foldlevel=99            " don't fold by default
set textwidth=79            " Wrap text to next line if over the text limit

" These next three commands are to make hashs work with smart indent
set cindent                 "
set cinkeys-=0#             "
set indentkeys-=0#          "
set nosmartindent           " Use filetype-specific plugins and indentation

""" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex
set hidden                  " Allow switching between buffers without saving first

""" Tab Completion settings
set wildmenu                   " Horizontal and unobstructive menu
set wildmode=longest,list,full " Give the first list in list format

""" Spelling and grammar
set spell                   " Turn on spell check
set spellfile=~/.vim/spell/techspeak.utf-8.add " Teach Vim the tech lingos


"  _
" | |    __ _ _ __   __ _ _   _  __ _  __ _  ___  ___
" | |   / _` | '_ \ / _` | | | |/ _` |/ _` |/ _ \/ __|
" | |__| (_| | | | | (_| | |_| | (_| | (_| |  __/\__ \
" |_____\__,_|_| |_|\__, |\__,_|\__,_|\__, |\___||___/
"                   |___/             |___/
"
autocmd BufRead,BufNewFile *.html setlocal filetype=htmldjango
autocmd BufNewFile,BufRead *.jinja set syntax=html

autocmd FileType python setlocal shiftwidth=4 softtabstop=4 tabstop=4

autocmd FileType htmldjango setlocal shiftwidth=2 softtabstop=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 softtabstop=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 tabstop=2

autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2 tabstop=2
autocmd FileType eruby setlocal shiftwidth=2 softtabstop=2 tabstop=2

autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2 tabstop=2
autocmd FileType puppet setlocal shiftwidth=2 softtabstop=2 tabstop=2

autocmd FileType tex setlocal shiftwidth=2 softtabstop=2 tabstop=2
" TODO: autocmd for java
" TODO: autocmd for rust
" TODO: autocmd for go
" TODO: autocmd for elixir
" TODO: autocmd for c++
" TODO: autocmd for cython
" TOOD: autocmd for python c api if it's possible.

set wildignore+=*.pyc, " Ignore compiled Python
set wildignore+=eggs/** " Ignore Python binary's
set wildignore+=*.egg-info/** " Ignore Python binary meta data

set wildignore+=*.o,*.obj " Ignore object files
set wildignore+=.git " Ignore git artifacts

" Code Syntax
syntax on                     " syntax highlighting
let g:markdown_fenced_languages = ['python']

"  _  __            ____  _           _ _
" | |/ /___ _   _  | __ )(_)_ __   __| (_)_ __   __ _ ___
" | ' // _ \ | | | |  _ \| | '_ \ / _` | | '_ \ / _` / __|
" | . \  __/ |_| | | |_) | | | | | (_| | | | | | (_| \__ \
" |_|\_\___|\__, | |____/|_|_| |_|\__,_|_|_| |_|\__, |___/
"           |___/                               |___/
"
" Use Ctrl+F to fuzzy search for files in the current git project (from FZF)
nnoremap <C-f> :GitFiles<CR>
"<C-_> is actually <C-/> "https://stackoverflow.com/a/9051932
nnoremap <C-_> :GitGrep<CR>

" Move up/down a line visually regardless of the length of the line.
nmap j gj
nmap k gk

" Use Ctrl-z to increment a number (Ctrl-a is taken by Tmux)
map <C-z> <C-a>

" Switch between buffers.
noremap H :bprev<CR>
noremap L :bnext<CR>

" Remap window movement
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Remove tailing whitespaces and tabs on every line
command TrimWhitespace :%s/\s\+$//

let g:pep8_map='<leader>8'

"   ____      _
"  / ___|___ | | ___  _ __ ___
" | |   / _ \| |/ _ \| '__/ __|
" | |__| (_) | | (_) | |  \__ \
"  \____\___/|_|\___/|_|  |___/
"
" Use 256 colors in color schemes
set t_Co=256
set term=screen-256color

set background=dark           " We are using dark background in vim
colorscheme afterglow
hi Search cterm=NONE ctermbg=DarkMagenta ctermfg=white  guibg=DarkMagenta guifg=white
hi Visual cterm=NONE ctermbg=darkblue ctermfg=white  guibg=darkblue guifg=white

" Highlight trailing whitespaces and tabs
highlight ExtraWhitespace ctermbg=red
match ExtraWhitespace /\s\+$/

" found at:
" https://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" I haven't found how to hide this function (yet)
function! RestoreRegister()
  let @" = s:restore_reg
    return ''
endfunction

function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction

" NB: this supports "rp that replaces the selection by the contents of @r
vnoremap <silent> <expr> p <sid>Repl()
